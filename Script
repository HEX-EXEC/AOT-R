pcall(function()
    repeat
        wait()
    until game:IsLoaded() and game.Players.LocalPlayer.Character and workspace.Titans:GetChildren()
    wait(3.5)
    
    local Titans = workspace:WaitForChild("Titans")
    local Remotes = game.ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Remotes")

    -- Player Objects
    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local Humanoid = Character:WaitForChild("Humanoid")
    local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
    local PlayerGui = Player:WaitForChild("PlayerGui")

    -- Variables
    local Total = 0
    local TitansStorage = {}
    local TitansProcessed = 0

    local function collectTitans()
        for _, Titan in ipairs(Titans:GetChildren()) do
            if Titan:IsA("Model") and Titan:FindFirstChild("Humanoid") then
                TitansStorage[Titan.Name] = Titan
                print("Stored Titan: " .. Titan.Name)
            end
        end

        -- Notify the player about the start of processing
        Notify("Hexhub", "Started " .. #Titans:GetChildren() .. " Titans", 5)
        print("Started processing " .. #Titans:GetChildren() .. " Titans")
    end

    local function monitorInterface()
        local Interface = PlayerGui:FindFirstChild("Interface")
        if Interface then
            Interface.ChildAdded:Connect(function(Child)
                if Child.Name == "Numbers" then
                    task.spawn(function()
                        while Child.Parent do
                            Child:Destroy()
                            task.wait()
                        end
                        print("Destroyed Numbers child in Interface")
                    end)
                end
            end)
        end
    end

    local function handleNapes()
        for _, Titan in pairs(TitansStorage) do
            local Nape = Titan:FindFirstChild("Hitboxes") and Titan.Hitboxes:FindFirstChild("Hit") and Titan.Hitboxes.Hit:FindFirstChild("Nape")
            if Nape then
                Nape.ChildAdded:Connect(function(Child)
                    if Child.Name == "Blood" or Child.Name == "Hit" then
                        task.spawn(function()
                            while Child.Parent do
                                Child:Destroy()
                                task.wait()
                            end
                            print("Destroyed child: " .. Child.Name .. " in Nape")
                        end)
                    end
                end)
            end
        end
    end

    local function processTitans()
        for _, Titan in pairs(TitansStorage) do
            local Nape = Titan:FindFirstChild("Hitboxes") and Titan.Hitboxes:FindFirstChild("Hit") and Titan.Hitboxes.Hit:FindFirstChild("Nape")
            if Nape then
                TitansProcessed = TitansProcessed + 1
                print("Processing Titan: " .. Titan.Name)
                task.spawn(function()
                    while Nape and Nape.Parent and Nape.Parent.Parent do
                        Nape.Position = HumanoidRootPart.Position
                        task.wait()
                    end
                end)
            else
                print("Nape not found for Titan: " .. Titan.Name)
            end
        end
    end

    local function invokeServerFunctions()
        Remotes.GET:InvokeServer("Functions", "Retry", "Add")
        print("Invoked server function: Retry Add")

        while TitansProcessed ~= Total do
            task.wait()
        end

        Remotes.GET:InvokeServer("S_Skills", "Usage", "23")
        print("Used skill 23")
        task.wait(3)
        Remotes.GET:InvokeServer("S_Skills", "Usage", "14")
        print("Used skill 14")

        local index = 0

        while true do
            for _, v in pairs(Titans:GetChildren()) do
                if v:FindFirstChild("Humanoid") then
                    index = index + 1
                end
            end

            Notify("Titans Remaining", tostring(index), 5)
            print("Titans Remaining: " .. tostring(index))
            task.wait(2)

            index = 0
        end
    end

    local function optimizeGameObjects()
        local Lighting = game:GetService("Lighting")
        for _, LightObj in pairs(Lighting:GetChildren()) do
            LightObj:Destroy()
            print("Destroyed lighting object: " .. LightObj.Name)
        end
        task.wait(1)
        local UselessShit = {"Climbable", "Debris", "Points", "Platforms", "Props", "Reloads", "Trees", "U_Buildings", "Tree_Colliders", "Fake"}
        for _, Obj in ipairs(game:GetDescendants()) do
            if Obj:IsA("ParticleEmitter") or table.find(UselessShit, Obj.Name) then
                Obj:Destroy()
                print("Destroyed unnecessary object: " .. Obj.Name)
            end
        end
    end

    task.spawn(function()
        collectTitans()
        task.spawn(monitorInterface)
        task.spawn(handleNapes)
        task.spawn(processTitans)
        task.spawn(invokeServerFunctions)
        task.spawn(optimizeGameObjects)
    end)
end)
