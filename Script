local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local VirtualInputManager = game:GetService("VirtualInputManager")
local VIM = game:GetService("VirtualInputManager")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HRP = Character:WaitForChild("HumanoidRootPart")

local Titans = Workspace:WaitForChild("Titans")
local Remotes = ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Remotes")

print("Initialization complete.")

-- Function to disable collisions
local function disableCollisions()
    for _, part in ipairs(Character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = false
        end
    end
end

-- Function to find the closest Titan nape
local function findClosestNape()
    local closestNape, closestHumanoid, closestDist = nil, nil, math.huge

    for _, Titan in ipairs(Titans:GetChildren()) do
        if Titan:IsA("Model") then
            local Humanoid = Titan:FindFirstChild("Humanoid")

            if Humanoid then
                for _, Obj in ipairs(Titan:GetDescendants()) do
                    if Obj.Name == "Nape" and Obj:IsA("BasePart") then
                        local Dist = (HRP.Position - Obj.Position).Magnitude

                        if Dist < closestDist then
                            closestDist = Dist
                            closestNape = Obj
                            closestHumanoid = Humanoid
                        end
                    end
                end
            end
        end
    end

    return closestNape, closestHumanoid
end

-- Main loop for farming
local function mainLoop()
    while true do
        local closestNape, closestHumanoid = findClosestNape()

        if closestNape and closestHumanoid and closestHumanoid.Parent then
            Remotes.POST:FireServer("Attacks", "Slash", true)
            Remotes.GET:InvokeServer("Hitboxes", "Register", closestNape, math.random(225000, 230000), math.random(500000, 1000000))
        end

        task.wait(0) -- Adjusted wait time for performance
    end

    print("Free farming stopped.")
end

-- Auto Retry Function
local function autoRetry()
    while true do
        local closestNape, closestHumanoid = findClosestNape()

        if not closestNape then
            Remotes.GET:InvokeServer("Functions", "Retry", "Add")
        end

        task.wait(0.5) -- Adjusted wait time for performance
    end
end

-- Run the script
local function runAutoFarm()
    disableCollisions()
    task.spawn(mainLoop) -- Run main loop in parallel
    task.spawn(autoRetry) -- Start auto retry in parallel
end

-- Ensure Titans are loaded before starting the auto farm
local function waitForNapes()
    while not findClosestNape() do
        task.wait(0.1)
    end
end

-- AutoBlade function
local function autoBlade()
    while task.wait() do
        if not G_Reload then return end -- Check the toggle variable
        local character = game.Players.LocalPlayer.Character
        if character then
            local rig = character:FindFirstChild("Rig_"..game.Players.LocalPlayer.Name)
            if rig then
                for i,v in pairs(rig:GetChildren() or {}) do
                    if v.Name == "RightHand" or v.Name == "LeftHand" then
                        for i2,v2 in pairs(v:GetChildren() or {}) do
                            if v2.Name == "Blade_1" then
                                local broken = v2:GetAttribute("Broken")
                                if broken ~= nil and broken == true then
                                    pcall(function()
                                        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.R, false, game)
                                        task.wait(0.1)
                                        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.R, false, game)
                                    end)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

-- AutoEscape function
local function autoEscape()
    getgenv().autoescape = true

    while task.wait(0.3) do
        if not getgenv().autoescape then return end
        for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.Interface.Buttons:GetChildren()) do
            if v ~= nil then
                VIM:SendKeyEvent(true, string.sub(tostring(v), 1, 1), false, game)
            end
        end
    end
end

-- Start the auto farm when napes are loaded
waitForNapes()
runAutoFarm()
task.spawn(autoBlade) -- Start AutoBlade in parallel
task.spawn(autoEscape) -- Start AutoEscape in parallel

print("Auto farm and blade functions are running.")

